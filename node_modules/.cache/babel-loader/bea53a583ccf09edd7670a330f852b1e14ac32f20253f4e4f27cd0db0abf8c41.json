{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B 2022\\\\react\\\\my-app\\\\src\\\\Chat\\\\Chat.tsx\";\nimport React from 'react';\nimport classes from './../styles/Chat.module.css';\nimport axios from 'axios';\nimport Message from '../Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = _ref => {\n  let {\n    idInstance,\n    apiTokenInstance,\n    friendNumber,\n    chat,\n    setFriendMessage,\n    setChat,\n    setIsButtonClicked,\n    isOk,\n    isRead,\n    setIsOk,\n    setIsRead\n  } = _ref;\n  const clearInput = () => {\n    setMessage('');\n  };\n  const sendMessage = () => {\n    const endpointURL = `https://api.green-api.com/waInstance${idInstance}/sendMessage/${apiTokenInstance}`;\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const data = {\n      chatId: friendNumber + '@c.us',\n      message: message\n    };\n    axios.post(endpointURL, data, {\n      headers\n    }).then(response => {\n      console.log(`[Response]: ${response.data}`);\n    }).catch(error => {\n      console.error(`[ERROR ${error.response.status}]: ${error.response.statusText} ${error.response.data}`);\n    });\n    clearInput();\n    processingNotification();\n    setWhoTyped(true);\n    setChat([...chat, {\n      message: message,\n      whoTyped: true\n    }]);\n  };\n  const processingNotification = () => {\n    const config = {\n      method: 'get',\n      maxBodyLength: Infinity,\n      url: `https://api.green-api.com/waInstance${idInstance}/ReceiveNotification/${apiTokenInstance}`,\n      headers: {}\n    };\n    axios.request(config).then(response => {\n      console.log(JSON.stringify(response.data));\n      const receiptId = response.data.receiptId;\n      if (response.data.body.typeWebhook === 'outgoingMessageStatus' && response.data.body.status === 'read') {\n        setIsRead(true);\n      } else if (response.data.body.typeWebhook === 'outgoingMessageStatus' && response.data.body.status === 'delivered') {\n        setIsOk(true);\n      } else if (response.data.body.typeWebhook === 'incomingMessageReceived') {\n        setWhoTyped(false);\n        setFriendMessage(response.data.body.messageData.textMessageData.textMessage);\n        setChat([...chat, {\n          message: response.data.body.messageData.textMessageData.textMessage,\n          whoTyped: false\n        }]);\n      }\n      deleteNot(receiptId);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const deleteNot = receiptId => {\n    let config = {\n      method: 'delete',\n      maxBodyLength: Infinity,\n      url: `https://api.green-api.com/waInstance${idInstance}/deleteNotification/${apiTokenInstance}/${receiptId}`,\n      headers: {}\n    };\n    axios.request(config).then(response => {\n      console.log(JSON.stringify(response.data));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.infoContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.sendButton} ${classes.backButton}`,\n          onClick: () => setIsButtonClicked(false),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.info,\n          children: [\"Chat with: \", friendNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.chat,\n        children: chat ? chat.map(letter => /*#__PURE__*/_jsxDEV(Message, {\n          isOk: isOk,\n          isRead: isRead,\n          whoTyped: letter.whoTyped,\n          children: letter.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.message,\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Enter your message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.sendButton,\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.sendButton,\n          onClick: processingNotification,\n          children: \"Get\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","classes","axios","Message","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_ref","idInstance","apiTokenInstance","friendNumber","chat","setFriendMessage","setChat","setIsButtonClicked","isOk","isRead","setIsOk","setIsRead","clearInput","setMessage","sendMessage","endpointURL","headers","data","chatId","message","post","then","response","console","log","catch","error","status","statusText","processingNotification","setWhoTyped","whoTyped","config","method","maxBodyLength","Infinity","url","request","JSON","stringify","receiptId","body","typeWebhook","messageData","textMessageData","textMessage","deleteNot","children","className","chatContainer","infoContainer","sendButton","backButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","info","map","letter","inputContainer","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/Проекты 2022/react/my-app/src/Chat/Chat.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport classes from './../styles/Chat.module.css';\r\nimport axios from 'axios';\r\nimport Message from '../Message';\r\nimport { ChatProps } from '../types/props';\r\n\r\n\r\nconst Chat: React.FC<ChatProps> = ({ idInstance, apiTokenInstance, friendNumber, chat, setFriendMessage, setChat, setIsButtonClicked, isOk, isRead, setIsOk, setIsRead }) => {\r\n\r\n\r\n\r\n    const clearInput = () => {\r\n        setMessage('')\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        const endpointURL = `https://api.green-api.com/waInstance${idInstance}/sendMessage/${apiTokenInstance}`;\r\n\r\n        const headers = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n\r\n        const data = {\r\n            chatId: friendNumber + '@c.us',\r\n            message: message\r\n        };\r\n\r\n        axios.post(endpointURL, data, { headers })\r\n            .then((response) => {\r\n                console.log(`[Response]: ${response.data}`);\r\n            })\r\n            .catch((error) => {\r\n                console.error(`[ERROR ${error.response.status}]: ${error.response.statusText} ${error.response.data}`);\r\n            });\r\n        clearInput()\r\n        processingNotification()\r\n        setWhoTyped(true)\r\n        setChat([...chat, { message: message, whoTyped: true }])\r\n    }\r\n\r\n    const processingNotification = () => {\r\n        const config = {\r\n            method: 'get',\r\n            maxBodyLength: Infinity,\r\n            url: `https://api.green-api.com/waInstance${idInstance}/ReceiveNotification/${apiTokenInstance}`,\r\n            headers: {}\r\n        };\r\n\r\n        axios.request(config)\r\n            .then((response) => {\r\n                console.log(JSON.stringify(response.data));\r\n                const receiptId = response.data.receiptId\r\n                if (response.data.body.typeWebhook === 'outgoingMessageStatus' && response.data.body.status === 'read') {\r\n                    setIsRead(true)\r\n                }\r\n                else if (response.data.body.typeWebhook === 'outgoingMessageStatus' && response.data.body.status === 'delivered') {\r\n                    setIsOk(true)\r\n                }\r\n                else if (response.data.body.typeWebhook === 'incomingMessageReceived') {\r\n                    setWhoTyped(false)\r\n                    setFriendMessage(response.data.body.messageData.textMessageData.textMessage)\r\n                    setChat([...chat, { message: response.data.body.messageData.textMessageData.textMessage, whoTyped: false }])\r\n                }\r\n                deleteNot(receiptId)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n\r\n\r\n    const deleteNot = (receiptId: number) => {\r\n        let config = {\r\n            method: 'delete',\r\n            maxBodyLength: Infinity,\r\n            url: `https://api.green-api.com/waInstance${idInstance}/deleteNotification/${apiTokenInstance}/${receiptId}`,\r\n            headers: {}\r\n        };\r\n        axios.request(config)\r\n            .then((response) => {\r\n                console.log(JSON.stringify(response.data));\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.chatContainer}>\r\n                <div className={classes.infoContainer}>\r\n                    <button className={`${classes.sendButton} ${classes.backButton}`} onClick={() => setIsButtonClicked(false)}>Back</button>\r\n                    <div className={classes.info}>Chat with: {friendNumber}</div>\r\n                </div>\r\n                <div className={classes.chat}>\r\n                    {chat ? chat.map(letter =>\r\n                        <Message\r\n                        isOk={isOk}\r\n                        isRead={isRead}\r\n                        whoTyped={letter.whoTyped}>{letter.message}</Message>) : <></>}\r\n                </div>\r\n                <div className={classes.inputContainer}>\r\n                    <input className={classes.message} type='text' value={message} onChange={(e) => setMessage(e.target.value)} placeholder='Enter your message'></input>\r\n                    <button className={classes.sendButton} onClick={sendMessage}>Send</button>\r\n                    <button className={classes.sendButton} onClick={processingNotification}>Get</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chat"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}